{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","type","onChange","change","value","placeholder","Result","_props$weather","weather","date","err","city","sunrise","sunset","temp","pressure","wind","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","class","className","concat","APIKey","App","state","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","components_Form","this","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1f09ee5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form onSubmit={props.submit}>\r\n      <input type=\"text\"\r\n        onChange={props.change}\r\n        value={props.value}\r\n        placeholder=\"Wpisz miasto\" />\r\n      <button>Wyszukaj miasto</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport './Result.css';\r\n\r\nconst Result = (props) => {\r\n\r\n  const { date, err, city, sunrise, sunset, temp, pressure, wind } = props.weather\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <div class=\"card\">\r\n        <h3>Wyniki wyszukiwanie dla <em>{city} </em> </h3>\r\n        <h4>Dane dla dnia i godziny: {date} </h4>\r\n        <h4>Aktualna temperarua : {temp} &#176;C</h4>\r\n        <h4>Wschód słońca dzisaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisaj o {sunsetTime}</h4>\r\n        <h4>Aktualna siła wiatru {wind} m/s</h4>\r\n        <h4>Aktualne ciśnienie {pressure} hPa</h4>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `Nie mamy w bazie: ${city}` : content}\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n// Klucz do API\nconst APIKey = 'efa2ef11f117f7485b2fca8e87a3a2f5'\n\nclass App extends Component {\n\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false,\n  }\n\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n\n\n\n  handleCitySubmit = (e) => {\n    e.preventDefault()\n\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response\n        }\n        throw Error(\"Nie udało się\")\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString()\n        this.setState({\n          err: false,\n          date: time,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: this.state.value,\n        })\n      })\n      .catch(err => {\n        this.setState(state => ({\n          err: true,\n          city: state.value,\n        }));\n      })\n  }\n\n\n  // componentDidUpdate(prevProps, prevState) {\n\n    \n\n  //   if (prevState.value !== this.state.value) {\n  //     const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n  //     fetch(API)\n  //       .then(response => {\n  //         if (response.ok) {\n  //           return response\n  //         }\n  //         throw Error(\"Nie udało się\")\n  //       })\n  //       .then(response => response.json())\n  //       .then(data => {\n  //         const time = new Date().toLocaleString()\n  //         this.setState({\n  //           err: false,\n  //           date: time,\n  //           sunrise: data.sys.sunrise,\n  //           sunset: data.sys.sunset,\n  //           temp: data.main.temp,\n  //           pressure: data.main.pressure,\n  //           wind: data.wind.speed,\n  //           city: this.state.value,\n  //         })\n  //       })\n  //       .catch(err => {\n  //         this.setState(state => ({\n  //           err: true,\n  //           city: state.value,\n  //         }));\n  //       })\n  //   }\n\n\n  // }\n\n\n  render() {\n\n    return (\n      <div className='App'>\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit} \n        />\n       \n        <Result weather={this.state} />\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}